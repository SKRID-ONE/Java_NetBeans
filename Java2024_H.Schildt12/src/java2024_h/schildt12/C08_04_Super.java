/**
Использование ключевого слова super
 */
package java2024_h.schildt12;

/**
Ключевое слово super имеет две основные формы. Первая вызывает конструктор суперкласса,
* а вторая служит для доступа к члену суперкласса, который был сокрыт членом подкласса.
 */
public class C08_04_Super {
    public static void main (String args []) {
        BoxWeightSuper  mybox1 = new BoxWeightSuper(5.0, 3.0);
    }
}
//!!!!!!!!!!!!!!!ПЕРВАЯ ФОРМА использования super()
class BoxWeightSuper extends Box {
    double weight;

    //Инициализация переменных командой super() - вызов конструктора СУПЕРКЛАССА.    
    BoxWeightSuper(double w, double h, double d, double m){
        super(w,h,d);
        weight = m;
    }
    
    //Можно вызывать любой конструктор который есть в классе Box
    BoxWeightSuper(double len, double m){
        super(len);
        weight = m;
    }
    
    //ВНИМАНИЕ НА КОНСТРУКТОР ДЛЯ КЛОНИРОВАНИЯ
    
    BoxWeightSuper (BoxWeightSuper ob){
        super(ob);
        weight = ob.weight;
    }
    /*
    *Здесь вызову super () передается объект типа BoxWeight, а не Вох. Попрежнему вызывается конструктор Вох ( Вох оЬ ). 
    Как упоминалось ранее, переменная типа суперкласса может использоваться для ссылки на любой 
    объект, производный от этого класса, т.е. мы можем передавать конструктору 
    Вох объект BoxWeight. Конечно же, классу Вох известны только свои члены.
    */
}

//P.S. Много недописано, полный функционал реализован в классе BoxWeight, но без команды super();


//!!!!!!!!!!!!!!!ВТОРАЯ ФОРМА использования super() 

    /*
   Вторая форма ключевого слова super действует примерно так же, за исключением того,\
   что всегда относится к суперклассу подкласса, в котором задействована. Вот как она выr лядит: 
   suреr.член 
   */

class ASuper {
    int i = 2;
}

class BSuper extends ASuper{
    int i = 3; //Этот член i скрывает i из класса А.
    
    //Хотя переменная экземпляра i в В скрывает i в А, ключевое слово super делает возможным доступ к члену i, определенному в суперклассе.
    int showIFromA(){
        return super.i;
    }
}

class AB {
    public static void main (String [] args) {
    
        ASuper aob = new ASuper();
        BSuper bob = new BSuper();
        System.out.println("i из A = "+aob.i);
        System.out.println("i из B = "+bob.i);
        System.out.println("i из A через класс B = "+bob.showIFromA() );
        
    }
}
/*
В рамках иерархии классов, когда конструктору суперкласса 
требуются аргументы, то все подклассы должны передавать их "вверх по цепочке наследования': 
Сказанное верно независимо от того, нужны ли подклассу собственные аргументы. 
*/